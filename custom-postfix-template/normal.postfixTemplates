# toString
.ts : String.valueOf
  NON_VOID  ->  String.valueOf($expr$)

# equals
.oeq : Objects.equals
  NON_VOID [java.util.Objects]                             →  Objects.equals($end$, $expr$)
.seq : StringUtils.equals
  java.lang.String [org.apache.commons.lang3.StringUtils]  →  StringUtils.equals($end$, $expr$)
.seqi : StringUtils.equalsIgnoreCase
  java.lang.String [org.apache.commons.lang3.StringUtils]  →  StringUtils.equalsIgnoreCase($end$, $expr$)

# log
.debug : log.debug String/Throwable
  java.lang.String [org.slf4j.Logger]     →  log.debug($expr$);
  java.lang.Throwable [org.slf4j.Logger]  →  log.debug(null, $expr$);

.info : log.info String/Throwable
  java.lang.String [org.slf4j.Logger]     →  log.info($expr$);
  java.lang.Throwable [org.slf4j.Logger]  →  log.info(null, $expr$);

.warn : log.warn String/Throwable
  java.lang.String [org.slf4j.Logger]     →  log.warn($expr$);
  java.lang.Throwable [org.slf4j.Logger]  →  log.warn(null, $expr$);

.err : log.error String/Throwable
  java.lang.String [org.slf4j.Logger]     →  log.error($expr$);
  java.lang.Throwable [org.slf4j.Logger]  →  log.error(null, $expr$);

# boolean
.in : isNull(Object)
  NON_VOID [java.util.Objects]                                            →  Objects.isNull($expr$)
.nn : nonNull(Object)
  NON_VOID [java.util.Objects]                                            →  Objects.nonNull($expr$)
.ib : isBlank(String)
  java.lang.String [org.apache.commons.lang3.StringUtils]                 →  StringUtils.isBlank($expr$)
.inb : isNotBlank(String)
  java.lang.String [org.apache.commons.lang3.StringUtils]                 →  StringUtils.isNotBlank($expr$)
.ie : isEmpty(Collection)
  java.util.Collection [org.apache.commons.collections4.CollectionUtils]  →  CollectionUtils.isEmpty($expr$)
  java.util.Map [org.apache.commons.collections4.MapUtils]                →  MapUtils.isEmpty($expr$)
.ine : isNotEmpty(Collection)
  java.util.Collection [org.apache.commons.collections4.CollectionUtils]  →  CollectionUtils.isNotEmpty($expr$)

# lambda
.toIntStream : to IntStream
  NUMBER → java.util.stream.IntStream.range(0, $expr$).mapToObj(index -> {  $end$  }).toList();
